##### Functions #####
1. get_data_type() -> Array(2)
2. filter_job(mode, type, data_range) -> returns [str]
3. create_job_array(data_table_subset, qp) -> append str to job_array
    3.1 read every element within data_table_subset, for each element: 
    3.2 get_resolution(dataset_name, filename) 
        3.1.1 Dataset with same resolution throughout -> read from dictionary
        3.1.2 dataset with resolution on name (e.g. SFU) -> split by "x" and read integer before and after
        3.1.3 Each file under dataset has different res. , read res using ffprobe  ## need to assume cluster have FFMPEG3


## task: object, structure: video%name%qp_value%intra_period%frame_rate%frames_num%frame_skip%dataset_dir%additional_param (-dph 1...)
job_array=() # element; element.name; 
for datatype in data_types:
    data_subset_table = filter_job(mode, datatype, data_range=None)
    job_array.append(create_job_array(data_subset_table, qp))

echo job_array # contains a list of objects (either video or image objects)

dataset_diretory = "CTC"
test_folder = "(realpath ./)"
sendTask(task_object)
    job_array = ["-i CTC_dataset/FLIR/FLIR0891.yuv -b bin_folder/FLIR/QP_22/FLIR0891.vvc -c -c cfg/encoder_intra_vtm.cfg -fr 1 -f 1--ConformanceWindowMode=1%20bin_folder/dataset_name/QP_22%20FLIR0891.log"]
    for ele in job_array:
        ssh $pc $test_folder/RunOne.sh -p $ele

    if task_object.type == "video":
        log_file=job_obj.split(%20)[2]
        file_path = os.patj.join(dataset_diretory, task_object.name)
        parameters = "-i $file_path -qp ${task_object.qp} $additional_parameter"
        echo "encoder job_obj.split(%20)[0]" >> log_file
        ssh ... ./RunOne.sh -p "parameters" >> log_file

counter = 0
while counter < len(job_array) {
    request_count = 0

    while True:
        sleep(2)

        for pc in client_pc:
            available = check_if_available(pc)
            if available:
                $avai_pc_ip = $pc
                break [2]
        
        request_count += 1

        if request_count >= 10:
            break [2]

    sendTask(job_array[counter])
    counter += 1

    if not exist (start.tim):
        creeate the file                      
}

if counter == len(job_array):
    create done.time
else:
    raise ("some task is not sent successfully")  # should never get triggered